@page "/"

@using GigaComic.Client.Components.Modal
@using GigaComic.Client.Managers.Comic
@using GigaComic.Shared.Requests.Comic
@using GigaComic.Shared.Responses.Comic
@using GigaComic.Client.Components.Comic.Theme

@attribute [Authorize]

@inject IComicManager comicManager

<PageTitle>Создать комикс</PageTitle>

<main class="page page__bg-gray">
    <div class="content">
        @if (ComicResponseModel != null)
        {
            <ComicView OnForcedRefresh="OnForcedRefresh" ComicResponseModel="ComicResponseModel" />
        }
        else
        {
            <CreateTheme CreateComicRequestModel="CreateComicRequestModel" OnContinueCallback="CreateComicAsync" />
        }
    </div>
</main>

<SimpleModal @ref="_errorModal" />

@code {
    private ComicResponse? ComicResponseModel { get; set; } = null;
    private CreateComicRequest CreateComicRequestModel { get; set; } = new();
    private SimpleModal? _errorModal;

    private async Task CreateComicAsync()
    {
        var result = await comicManager.CreateComicByThemeAsync(CreateComicRequestModel);

        if (result.Succeeded)
        {
            ComicResponseModel = result.Data;
        }
        else
        {
            _errorModal!.ShowError(result.GetMessages());
        }

        StateHasChanged();
    }

    private async Task OnForcedRefresh()
    {
        var result = await comicManager.GetComicAsync(ComicResponseModel!.Id);

        if (result.Succeeded)
        {
            ComicResponseModel = result.Data;
        }
        else
        {
            _errorModal!.ShowError(result.GetMessages());
        }
    }
}