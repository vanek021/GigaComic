@using GigaComic.Client.Components.Modal
@using GigaComic.Shared.Responses.Comic

<EditForm OnValidSubmit="OnContinue" Model="ComicResponseModel">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <h2 class="content__title">Выберите тезисы, которые мы придумали для вас:</h2>

    <div class="abstracts__container">
        <DragDrop Items="_orderedActiveAbstracts" Context="item">
            <ItemTemplate>
                <div class="abstracts__item">
                    <div class="close-button" @onclick="(_ => RemoveFromActive(item))">×</div>
                    <p>@item.Name</p>
                </div>
            </ItemTemplate>
        </DragDrop>
        @if (!string.IsNullOrEmpty(_error))
        {
            <div style="padding-left: 20px;" class="validation-message">@_error</div>
        }
    </div>

    @if (_notActiveAbstracts.Any())
    {
        <div class="abstracts__list">
            <p>Кликните на тезис, чтобы перенесети его в область выбора</p>
            <div class="d-flex abstracts__list-flex">
                @foreach (var comicAbstract in _notActiveAbstracts)
                {
                    <div class="abstracts__item-inactive" @onclick="(_ => AddToActive(comicAbstract))">
                        <p>@comicAbstract.Name</p>
                    </div>
                }
            </div>
        </div>
    }

    <div class="abstracts__actions">
        <Button Class="button --default-button"
                OnClick="ShowCreateAbstractModal"
                Type="button">
            Добавить тезис
        </Button>
        <ButtonWithLoader @ref="_btn"
                          Type="submit"
                          Text="Продолжить" />
    </div>

</EditForm>

<AbstractCreateModal @ref="_abstractCreateModalDraft" OnCreate="CreateAbstract" />
@code {
    [Parameter]
    public ComicResponse? ComicResponseModel { get; set; }

    [Parameter]
    public EventCallback OnContinueCallback { get; set; }

    private List<ComicAbstractResponse> _orderedActiveAbstracts = new();
    private List<ComicAbstractResponse> _notActiveAbstracts = new();
    private AbstractCreateModal? _abstractCreateModalDraft;
    private ButtonWithLoader? _btn;
    private string? _error;

    protected override Task OnInitializedAsync()
    {
        if (ComicResponseModel!.Stage != Models.Enums.ComicStage.AbstractsCreation)
            throw new ArgumentException();

        _orderedActiveAbstracts = ComicResponseModel.OrderedActiveAbstracts;
        _notActiveAbstracts = ComicResponseModel.NotActiveAbstracts;

        return base.OnInitializedAsync();
    }

    private async Task OnContinue()
    {
        _btn!.MarkAsLoading();
        _error = null;

        if (_orderedActiveAbstracts.Count < 3)
        {
            _error = "Выберите как минимум 3 тезиса";
            _btn!.MarkAsDefault();
            return;
        }

        ComicResponseModel!.ComicAbstracts = _orderedActiveAbstracts.Concat(_notActiveAbstracts).ToList();

        await OnContinueCallback.InvokeAsync();
        _btn!.MarkAsDefault();
    }

    private void RemoveFromActive(ComicAbstractResponse item)
    {
        var toRemoveIndex = _orderedActiveAbstracts.IndexOf(item);

        if (toRemoveIndex > -1)
        {
            var toRemove = _orderedActiveAbstracts[toRemoveIndex];
            toRemove.IsActive = false;
            toRemove.Order = -1;

            _orderedActiveAbstracts.RemoveAt(toRemoveIndex);
            _notActiveAbstracts.Add(toRemove);
        }
    }

    private void AddToActive(ComicAbstractResponse item)
    {
        _notActiveAbstracts.Remove(item);

        item.Order = _orderedActiveAbstracts.Count;
        item.IsActive = true;

        _orderedActiveAbstracts.Add(item);
    }

    private void ShowCreateAbstractModal()
    {
        _abstractCreateModalDraft?.Show();
        StateHasChanged();
    }

    private void CreateAbstract(ComicAbstractResponse comicAbstract)
    {
        _orderedActiveAbstracts = _orderedActiveAbstracts.Append(comicAbstract).ToList();
        StateHasChanged();
    }
}
