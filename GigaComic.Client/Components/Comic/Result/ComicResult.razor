@using GigaComic.Shared.Responses.Comic

@inject IJSRuntime js
@inject IConfiguration configuration

<h2 class="content__title">Вот, что получилось:</h2>

<div class="comic-container">
    <div class="swiper-button-prev"></div>
    <div class="swiper">
        <div class="swiper-wrapper">
            @foreach (var page in ComicResponseModel!.ComicImageResponses)
            {
                <div class="swiper-slide">
                    <a data-lightbox="comic" href="@($"{_apiUrl}{page.ImageUrl}")">
                        <img style="width: 50%;" src="@($"{_apiUrl}{page.ImageUrl}")" />
                    </a>
                </div>
            }
        </div>
    </div>
    <div class="swiper-button-next"></div>
    <div class="comic-container__actions">
        <ButtonWithLoader Icon="AppIcon.IconKind.DownloadWhite" Text="  .PDF" />
        <ButtonWithLoader Icon="AppIcon.IconKind.DownloadWhite" Text="  .ZIP" />
    </div>

    @* <ComicSteps CurrentStep="2" /> *@

</div>

@code {
    [Parameter]
    public ComicResponse? ComicResponseModel { get; set; }

    private string? _apiUrl;

    protected override Task OnInitializedAsync()
    {
        _apiUrl = configuration["apiUrl"];
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("initSwapper");
        await base.OnAfterRenderAsync(firstRender);
    }
}
